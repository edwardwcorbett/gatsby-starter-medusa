"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClient = void 0;
const axios_1 = __importDefault(require("axios"));
function medusaRequest(storeURL, path = "", headers = {}) {
    const options = {
        method: "GET",
        withCredentials: true,
        url: path,
        headers: headers
    };
    const client = axios_1.default.create({ baseURL: storeURL });
    return client(options);
}
const createClient = (options, reporter) => {
    const { storeUrl, authToken } = options;
    /**
     *
     * @param {string} date used fetch products updated since the specified date
     * @returns
     */
    async function products(date) {
        let products = [];
        let offset = 0;
        let count = 1;
        do {
            await medusaRequest(storeUrl, `/store/products?offset=${offset}`)
                .then(({ data }) => {
                products = [...products, ...data.products];
                count = data.count;
                offset = data.products.length;
            })
                .catch((error) => {
                reporter.error(`"The following error status was produced while attempting to fetch products: ${error}`);
                return [];
            });
        } while (products.length < count);
        return products;
    }
    /**
     *
     * @param {string} date used fetch regions updated since the specified date
     * @returns
     */
    async function regions(date) {
        const regions = await medusaRequest(storeUrl, `/store/regions`)
            .then(({ data }) => {
            return data.regions;
        })
            .catch((error) => {
            console.warn(`
            "The following error status was produced while attempting to fetch regions: ${error}
      `);
            return [];
        });
        return regions;
    }
    /**
     *
     * @param {string} date used fetch regions updated since the specified date
     * @returns
     */
    async function orders(date) {
        const orders = await medusaRequest(storeUrl, `/admin/orders`, {
            Authorization: `Bearer ${authToken}`
        })
            .then(({ data }) => {
            return data.orders;
        })
            .catch((error) => {
            console.warn(`
            The following error status was produced while attempting to fetch orders: ${error}. \n
            Make sure that the auth token you provided is valid.
      `);
            return [];
        });
        return orders;
    }
    /**
     *
     * @param {string} date used fetch regions updated since the specified date
     * @returns
     */
    async function collections(date) {
        let collections = [];
        let offset = 0;
        let count = 1;
        do {
            await medusaRequest(storeUrl, `/store/collections?offset=${offset}`)
                .then(({ data }) => {
                collections = [...collections, ...data.collections];
                count = data.count;
                offset = data.collections.length;
            })
                .catch((error) => {
                reporter.error(`"The following error status was produced while attempting to fetch products: ${error}`);
                return [];
            });
        } while (collections.length < count);
        return collections;
    }
    return {
        products,
        collections,
        regions,
        orders
    };
};
exports.createClient = createClient;
//# sourceMappingURL=client.js.map