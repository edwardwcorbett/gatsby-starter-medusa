"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var qs_1 = __importDefault(require("qs"));
var addresses_1 = __importDefault(require("./addresses"));
var base_1 = __importDefault(require("./base"));
var payment_methods_1 = __importDefault(require("./payment-methods"));
var CustomerResource = /** @class */ (function (_super) {
    __extends(CustomerResource, _super);
    function CustomerResource() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.paymentMethods = new payment_methods_1.default(_this.client);
        _this.addresses = new addresses_1.default(_this.client);
        return _this;
    }
    /**
     * Creates a customer
     * @param {StorePostCustomersReq} payload information of customer
     * @param customHeaders
     * @return { ResponsePromise<StoreCustomersRes>}
     */
    CustomerResource.prototype.create = function (payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/store/customers";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * Retrieves the customer that is currently logged
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersRes>}
     */
    CustomerResource.prototype.retrieve = function (customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/store/customers/me";
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    /**
     * Updates a customer
     * @param {StorePostCustomersCustomerReq} payload information to update customer with
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersRes>}
     */
    CustomerResource.prototype.update = function (payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/store/customers/me";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * Retrieve customer orders
     * @param {StoreGetCustomersCustomerOrdersParams} params optional params to retrieve orders
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersListOrdersRes>}
     */
    CustomerResource.prototype.listOrders = function (params, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/store/customers/me/orders";
        if (params) {
            var query = qs_1.default.stringify(params);
            if (query) {
                path += "?" + query;
            }
        }
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    /**
     * Resets customer password
     * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to reset customer password
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersRes>}
     */
    CustomerResource.prototype.resetPassword = function (payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/store/customers/password-reset";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * Generates a reset password token, which can be used to reset the password.
     * The token is not returned but should be sent out to the customer in an email.
     * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to generate token
     * @param customHeaders
     * @return {ResponsePromise}
     */
    CustomerResource.prototype.generatePasswordToken = function (payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/store/customers/password-token";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    return CustomerResource;
}(base_1.default));
exports.default = CustomerResource;
//# sourceMappingURL=customers.js.map