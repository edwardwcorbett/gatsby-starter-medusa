import { AdminGetOrdersParams, AdminOrdersListRes, AdminOrdersRes, AdminPostOrdersOrderClaimsClaimFulfillmentsReq, AdminPostOrdersOrderClaimsClaimReq, AdminPostOrdersOrderClaimsClaimShipmentsReq, AdminPostOrdersOrderClaimsReq, AdminPostOrdersOrderFulfillmentsReq, AdminPostOrdersOrderRefundsReq, AdminPostOrdersOrderReq, AdminPostOrdersOrderReturnsReq, AdminPostOrdersOrderShipmentReq, AdminPostOrdersOrderShippingMethodsReq, AdminPostOrdersOrderSwapsReq, AdminPostOrdersOrderSwapsSwapFulfillmentsReq, AdminPostOrdersOrderSwapsSwapShipmentsReq, AdminPostOrdersReq } from "@medusajs/medusa";
import { ResponsePromise } from "../../typings";
import BaseResource from "../base";
declare class AdminOrdersResource extends BaseResource {
    create(payload: AdminPostOrdersReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    update(id: string, payload: AdminPostOrdersOrderReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    retrieve(id: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    list(query?: AdminGetOrdersParams, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersListRes>;
    complete(id: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    capturePayment(id: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    refundPayment(id: string, payload: AdminPostOrdersOrderRefundsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    createFulfillment(id: string, payload: AdminPostOrdersOrderFulfillmentsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    cancelFulfillment(id: string, fulfillmentId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    cancelSwapFulfillment(id: string, swapId: string, fulfillmentId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    cancelClaimFulfillment(id: string, claimId: string, fulfillmentId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    createShipment(id: string, payload: AdminPostOrdersOrderShipmentReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    requestReturn(id: string, payload: AdminPostOrdersOrderReturnsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    cancel(id: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    addShippingMethod(id: string, payload: AdminPostOrdersOrderShippingMethodsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    archive(id: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    createSwap(id: string, payload: AdminPostOrdersOrderSwapsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    cancelSwap(id: string, swapId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    fulfillSwap(id: string, swapId: string, payload: AdminPostOrdersOrderSwapsSwapFulfillmentsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    createSwapShipment(id: string, swapId: string, payload: AdminPostOrdersOrderSwapsSwapShipmentsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    processSwapPayment(id: string, swapId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    createClaim(id: string, payload: AdminPostOrdersOrderClaimsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    cancelClaim(id: string, claimId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    updateClaim(id: string, claimId: string, payload: AdminPostOrdersOrderClaimsClaimReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    fulfillClaim(id: string, claimId: string, payload: AdminPostOrdersOrderClaimsClaimFulfillmentsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    createClaimShipment(id: string, claimId: string, payload: AdminPostOrdersOrderClaimsClaimShipmentsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
    deleteMetadata(id: string, key: string, customHeaders?: Record<string, any>): ResponsePromise<AdminOrdersRes>;
}
export default AdminOrdersResource;
