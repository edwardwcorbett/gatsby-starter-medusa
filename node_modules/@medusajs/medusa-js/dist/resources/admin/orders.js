"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var qs_1 = __importDefault(require("qs"));
var base_1 = __importDefault(require("../base"));
var AdminOrdersResource = /** @class */ (function (_super) {
    __extends(AdminOrdersResource, _super);
    function AdminOrdersResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdminOrdersResource.prototype.create = function (payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.update = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id;
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.retrieve = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id;
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.list = function (query, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders";
        if (query) {
            var queryString = qs_1.default.stringify(query);
            path = "/admin/orders?" + queryString;
        }
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.complete = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/complete";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.capturePayment = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/capture";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.refundPayment = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/refund";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.createFulfillment = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/fulfillment";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.cancelFulfillment = function (id, fulfillmentId, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/fulfillments/" + fulfillmentId + "/cancel";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.cancelSwapFulfillment = function (id, swapId, fulfillmentId, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/swaps/" + swapId + "/fulfillments/" + fulfillmentId + "/cancel";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.cancelClaimFulfillment = function (id, claimId, fulfillmentId, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/claims/" + claimId + "/fulfillments/" + fulfillmentId + "/cancel";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.createShipment = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/shipment";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.requestReturn = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/return";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.cancel = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/cancel";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.addShippingMethod = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/shipping-methods";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.archive = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/archive";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.createSwap = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/swaps";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.cancelSwap = function (id, swapId, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/swaps/" + swapId + "/cancel";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.fulfillSwap = function (id, swapId, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/swaps/" + swapId + "/fulfillments";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.createSwapShipment = function (id, swapId, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/swaps/" + swapId + "/shipments";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.processSwapPayment = function (id, swapId, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/swaps/" + swapId + "/process-payment";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.createClaim = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/claims";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.cancelClaim = function (id, claimId, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/claims/" + claimId + "/cancel";
        return this.client.request("POST", path, {}, {}, customHeaders);
    };
    AdminOrdersResource.prototype.updateClaim = function (id, claimId, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/claims/" + claimId;
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.fulfillClaim = function (id, claimId, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/claims/" + claimId + "/fulfillments";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.createClaimShipment = function (id, claimId, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/claims/" + claimId + "/shipments";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    AdminOrdersResource.prototype.deleteMetadata = function (id, key, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/orders/" + id + "/metadata/" + key;
        return this.client.request("DELETE", path, {}, {}, customHeaders);
    };
    return AdminOrdersResource;
}(base_1.default));
exports.default = AdminOrdersResource;
//# sourceMappingURL=orders.js.map