"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var qs_1 = __importDefault(require("qs"));
var base_1 = __importDefault(require("../base"));
var AdminRegionsResource = /** @class */ (function (_super) {
    __extends(AdminRegionsResource, _super);
    function AdminRegionsResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @description creates a region.
     * @param payload
     * @param customHeaders
     * @returns created region.
     */
    AdminRegionsResource.prototype.create = function (payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * @description updates a region
     * @param id id of the region to update.
     * @param payload update to apply to region.
     * @param customHeaders
     * @returns the updated region.
     */
    AdminRegionsResource.prototype.update = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id;
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * @description deletes a region
     * @param id id of region to delete.
     * @param customHeaders
     * @returns Deleted response
     */
    AdminRegionsResource.prototype.delete = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id;
        return this.client.request("DELETE", path, {}, {}, customHeaders);
    };
    /**
     * @description get a region
     * @param id id of the region to retrieve.
     * @param customHeaders
     * @returns the region with the given id
     */
    AdminRegionsResource.prototype.retrieve = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id;
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    /**
     * @description lists regions matching a query
     * @param query query for searching regions
     * @param customHeaders
     * @returns a list of regions matching the query.
     */
    AdminRegionsResource.prototype.list = function (query, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions";
        if (query) {
            var queryString = qs_1.default.stringify(query);
            path = "/admin/regions?" + queryString;
        }
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    /**
     * @description adds metadata to a region
     * @param id region id
     * @param payload metadata
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.setMetadata = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/metadata";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * @description delete a region's metadata key value pair
     * @param id region id
     * @param key metadata key
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.deleteMetadata = function (id, key, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/metadata/" + key;
        return this.client.request("DELETE", path, {}, {}, customHeaders);
    };
    /**
     * @description adds a country to the list of countries in a region
     * @param id region id
     * @param payload country data
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.addCountry = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/countries";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * @description remove a country from a region's list of coutnries
     * @param id region id
     * @param country_code the 2 character ISO code for the Country.
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.deleteCountry = function (id, country_code, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/countries/" + country_code;
        return this.client.request("DELETE", path, {}, {}, customHeaders);
    };
    /**
     * @description adds a fulfillment provider to a region
     * @param id region id
     * @param payload fulfillment provider data
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.addFulfillmentProvider = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/fulfillment-providers";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * @description remove a fulfillment provider from a region
     * @param id region id
     * @param provider_id the if of the fulfillment provider
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.deleteFulfillmentProvider = function (id, provider_id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/fulfillment-providers/" + provider_id;
        return this.client.request("DELETE", path, {}, {}, customHeaders);
    };
    /**
     * @description retrieves the list of fulfillment options available in a region
     * @param id region id
     * @param customHeaders
     * @returns list of fulfillment options
     */
    AdminRegionsResource.prototype.retrieveFulfillmentOptions = function (id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/fulfillment-options";
        return this.client.request("GET", path, {}, {}, customHeaders);
    };
    /**
     * @description adds a payment provider to a region
     * @param id region id
     * @param payload payment provider data
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.addPaymentProvider = function (id, payload, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/payment-providers";
        return this.client.request("POST", path, payload, {}, customHeaders);
    };
    /**
     * @description removes a payment provider from a region
     * @param id region id
     * @param provider_id the id of the payment provider
     * @param customHeaders
     * @returns updated region
     */
    AdminRegionsResource.prototype.deletePaymentProvider = function (id, provider_id, customHeaders) {
        if (customHeaders === void 0) { customHeaders = {}; }
        var path = "/admin/regions/" + id + "/payment-providers/" + provider_id;
        return this.client.request("DELETE", path, {}, {}, customHeaders);
    };
    return AdminRegionsResource;
}(base_1.default));
exports.default = AdminRegionsResource;
//# sourceMappingURL=regions.js.map