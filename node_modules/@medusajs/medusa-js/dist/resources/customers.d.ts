import { StoreCustomersListOrdersRes, StoreCustomersRes, StoreGetCustomersCustomerOrdersParams, StorePostCustomersCustomerPasswordTokenReq, StorePostCustomersCustomerReq, StorePostCustomersReq } from "@medusajs/medusa";
import { ResponsePromise } from "../typings";
import AddressesResource from "./addresses";
import BaseResource from "./base";
import PaymentMethodsResource from "./payment-methods";
declare class CustomerResource extends BaseResource {
    paymentMethods: PaymentMethodsResource;
    addresses: AddressesResource;
    /**
     * Creates a customer
     * @param {StorePostCustomersReq} payload information of customer
     * @param customHeaders
     * @return { ResponsePromise<StoreCustomersRes>}
     */
    create(payload: StorePostCustomersReq, customHeaders?: Record<string, any>): ResponsePromise<StoreCustomersRes>;
    /**
     * Retrieves the customer that is currently logged
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersRes>}
     */
    retrieve(customHeaders?: Record<string, any>): ResponsePromise<StoreCustomersRes>;
    /**
     * Updates a customer
     * @param {StorePostCustomersCustomerReq} payload information to update customer with
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersRes>}
     */
    update(payload: StorePostCustomersCustomerReq, customHeaders?: Record<string, any>): ResponsePromise<StoreCustomersRes>;
    /**
     * Retrieve customer orders
     * @param {StoreGetCustomersCustomerOrdersParams} params optional params to retrieve orders
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersListOrdersRes>}
     */
    listOrders(params?: StoreGetCustomersCustomerOrdersParams, customHeaders?: Record<string, any>): ResponsePromise<StoreCustomersListOrdersRes>;
    /**
     * Resets customer password
     * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to reset customer password
     * @param customHeaders
     * @return {ResponsePromise<StoreCustomersRes>}
     */
    resetPassword(payload: StorePostCustomersCustomerPasswordTokenReq, customHeaders?: Record<string, any>): ResponsePromise<StoreCustomersRes>;
    /**
     * Generates a reset password token, which can be used to reset the password.
     * The token is not returned but should be sent out to the customer in an email.
     * @param {StorePostCustomersCustomerPasswordTokenReq} payload info used to generate token
     * @param customHeaders
     * @return {ResponsePromise}
     */
    generatePasswordToken(payload: StorePostCustomersCustomerPasswordTokenReq, customHeaders?: Record<string, any>): ResponsePromise;
}
export default CustomerResource;
