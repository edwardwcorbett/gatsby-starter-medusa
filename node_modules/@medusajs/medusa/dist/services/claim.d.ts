export default ClaimService;
declare const ClaimService_base: any;
declare class ClaimService extends ClaimService_base {
    [x: string]: any;
    static Events: {
        CREATED: string;
        UPDATED: string;
        CANCELED: string;
        FULFILLMENT_CREATED: string;
        SHIPMENT_CREATED: string;
        REFUND_PROCESSED: string;
    };
    constructor({ manager, addressRepository, claimItemService, claimRepository, eventBusService, fulfillmentProviderService, fulfillmentService, inventoryService, lineItemService, paymentProviderService, regionService, returnService, shippingOptionService, taxProviderService, totalsService, }: {
        manager: any;
        addressRepository: any;
        claimItemService: any;
        claimRepository: any;
        eventBusService: any;
        fulfillmentProviderService: any;
        fulfillmentService: any;
        inventoryService: any;
        lineItemService: any;
        paymentProviderService: any;
        regionService: any;
        returnService: any;
        shippingOptionService: any;
        taxProviderService: any;
        totalsService: any;
    });
    /** @private @constant {EntityManager} */
    private manager_;
    addressRepo_: any;
    claimItemService_: any;
    claimRepository_: any;
    eventBus_: any;
    fulfillmentProviderService_: any;
    fulfillmentService_: any;
    inventoryService_: any;
    lineItemService_: any;
    paymentProviderService_: any;
    regionService_: any;
    returnService_: any;
    shippingOptionService_: any;
    taxProviderService_: any;
    totalsService_: any;
    withTransaction(manager: any): ClaimService;
    update(id: any, data: any): any;
    /**
     * Creates a Claim on an Order. Claims consists of items that are claimed and
     * optionally items to be sent as replacement for the claimed items. The
     * shipping address that the new items will be shipped to
     * @param {Object} data - the object containing all data required to create a claim
     * @return {Object} created claim
     */
    create(data: any): any;
    /**
     * @param {string} id - the object containing all data required to create a claim
     * @param {Object} config - config object
     * @param {Object | undefined}  config.metadata - config metadata
     * @param {boolean|undefined}  config.no_notification - config no notification
     * @return {Claim} created claim
     */
    createFulfillment(id: string, config?: {
        metadata: any | undefined;
        no_notification: boolean | undefined;
    }): Claim;
    cancelFulfillment(fulfillmentId: any): Promise<any>;
    processRefund(id: any): Promise<any>;
    createShipment(id: any, fulfillmentId: any, trackingLinks: any, config?: {
        metadata: {};
        no_notification: undefined;
    }): Promise<any>;
    cancel(id: any): Promise<any>;
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object containing query settings
     * @return {Promise} the result of the find operation
     */
    list(selector: any, config?: any): Promise<any>;
    /**
     * Gets an order by id.
     * @param {string} claimId - id of order to retrieve
     * @param {Object} config - the config object containing query settings
     * @return {Promise<Order>} the order document
     */
    retrieve(claimId: string, config?: any): Promise<Order>;
    /**
     * Dedicated method to delete metadata for an order.
     * @param {string} orderId - the order to delete metadata from.
     * @param {string} key - key for metadata field
     * @return {Promise} resolves to the updated result.
     */
    deleteMetadata(orderId: string, key: string): Promise<any>;
}
