export default LineItemService;
declare const LineItemService_base: any;
/**
 * Provides layer to manipulate line items.
 * @extends BaseService
 */
declare class LineItemService extends LineItemService_base {
    [x: string]: any;
    constructor({ manager, lineItemRepository, lineItemTaxLineRepository, productVariantService, productService, regionService, cartRepository, }: {
        manager: any;
        lineItemRepository: any;
        lineItemTaxLineRepository: any;
        productVariantService: any;
        productService: any;
        regionService: any;
        cartRepository: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {LineItemRepository} */
    private lineItemRepository_;
    /** @private @const {typeof LineItemTaxLineRepository} */
    private itemTaxLineRepo_;
    /** @private @const {ProductVariantService} */
    private productVariantService_;
    /** @private @const {ProductService} */
    private productService_;
    /** @private @const {RegionService} */
    private regionService_;
    /** @private @const {CartRepository} */
    private cartRepository_;
    withTransaction(transactionManager: any): LineItemService;
    list(selector: any, config?: {
        skip: number;
        take: number;
        order: {
            created_at: string;
        };
    }): Promise<any>;
    /**
     * Retrieves a line item by its id.
     * @param {string} id - the id of the line item to retrieve
     * @param {object} config - the config to be used at query building
     * @return {LineItem} the line item
     */
    retrieve(id: string, config?: object): LineItem;
    /**
     * Creates return line items for a given cart based on the return items in a
     * return.
     * @param {string} returnId - the id to generate return items from.
     * @param {string} cartId - the cart to assign the return line items to.
     * @return {Promise<LineItem[]>} the created line items
     */
    createReturnLines(returnId: string, cartId: string): Promise<LineItem[]>;
    generate(variantId: any, regionId: any, quantity: any, config?: {}): Promise<any>;
    /**
     * Create a line item
     * @param {LineItem} lineItem - the line item object to create
     * @return {LineItem} the created line item
     */
    create(lineItem: LineItem): LineItem;
    /**
     * Updates a line item
     * @param {string} id - the id of the line item to update
     * @param {object} update - the properties to update on line item
     * @return {LineItem} the update line item
     */
    update(id: string, update: object): LineItem;
    /**
     * Deletes a line item.
     * @param {string} id - the id of the line item to delete
     * @return {Promise} the result of the delete operation
     */
    delete(id: string): Promise<any>;
}
