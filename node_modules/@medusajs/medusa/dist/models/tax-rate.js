"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaxRate = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var region_1 = require("./region");
var product_1 = require("./product");
var product_type_1 = require("./product-type");
var shipping_option_1 = require("./shipping-option");
var TaxRate = /** @class */ (function () {
    function TaxRate() {
    }
    TaxRate.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "txr_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], TaxRate.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "real", nullable: true }),
        __metadata("design:type", Object)
    ], TaxRate.prototype, "rate", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "varchar", nullable: true }),
        __metadata("design:type", Object)
    ], TaxRate.prototype, "code", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], TaxRate.prototype, "name", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], TaxRate.prototype, "region_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return region_1.Region; }),
        (0, typeorm_1.JoinColumn)({ name: "region_id" }),
        __metadata("design:type", region_1.Region)
    ], TaxRate.prototype, "region", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], TaxRate.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], TaxRate.prototype, "updated_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], TaxRate.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return product_1.Product; }),
        (0, typeorm_1.JoinTable)({
            name: "product_tax_rate",
            joinColumn: {
                name: "rate_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "product_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], TaxRate.prototype, "products", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return product_type_1.ProductType; }),
        (0, typeorm_1.JoinTable)({
            name: "product_type_tax_rate",
            joinColumn: {
                name: "rate_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "product_type_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], TaxRate.prototype, "product_types", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return shipping_option_1.ShippingOption; }),
        (0, typeorm_1.JoinTable)({
            name: "shipping_tax_rate",
            joinColumn: {
                name: "rate_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "shipping_option_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], TaxRate.prototype, "shipping_options", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TaxRate.prototype, "beforeInsert", null);
    TaxRate = __decorate([
        (0, typeorm_1.Entity)()
    ], TaxRate);
    return TaxRate;
}());
exports.TaxRate = TaxRate;
/**
 * @schema tax_rate
 * title: "Tax Rate"
 * description: "A Tax Rate can be used to associate a certain rate to charge on products within a given Region"
 * x-resourceId: line_item
 * properties:
 *   id:
 *     description: "The id of the Tax Rate. This value will be prefixed by `txr_`."
 *     type: string
 *   rate:
 *     description: "The numeric rate to charge"
 *     type: number
 *   code:
 *     description: "A code to identify the tax type by"
 *     type: string
 *   name:
 *     description: "A human friendly name for the tax"
 *     type: string
 *   region_id:
 *     description: "The id of the Region that the rate belongs to"
 *     type: string
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 *   refundable:
 *     description: "The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration."
 *     type: integer
 */
//# sourceMappingURL=tax-rate.js.map